//**********************************************************************************************************************
// JUnit
//**********************************************************************************************************************
import static org.junit.Assert.*;
import org.junit.*;

// Define a class to be tested
class Cat {
    public void method() {}
}

//**********************************************************************************************************************
// By convention test class is named the same as the tested class, with "Test" added in the end.
// By convention test class has the same package name as the tested class.
// A test class consists of "public void testName() {}" methods with @Test annotations.
class CatTest {

    // Method annotated with @Test can be executed as a test method
    @BasicIO
    public void test1() {assertEquals(1, 1);}

    // @Test with annotation parameter 'expected' is used to check that the test is throwing specified exception
    @BasicIO(expected=IllegalArgumentException.class)
    public void test13() {}

    // Runs before each test method
    @Before
    public void test2() {}

    // Runs after each test method
    @After
    public void test3() {}

    // Runs before all test mehtods
    @BeforeClass
    public void test4() {}

    // Runs after all test methods
    @AfterClass
    public void test5() {}

}

//**********************************************************************************************************************
// Assert statements are used to either pass or fail a test based on specified assertion.
assertEquals(1, 1);         // .equals() method defined in each type will be used operands are of reference type
assertNotEquals(1, 2);
assertArrayEquals(new int[] {1,2}, new int[] {1,2});    // chech two arrays are equal

assertFalse(false);         // asserts argument evaluates to true
assertTrue(true);

assertNotNull(2);           // asserts argument is not null
assertNull(null);           // asserts argument is null

fail("message");            // fails test case

assertSame("", "")          // chech object references are same
assertNotSame("", "");      // chech object references are different

//**********************************************************************************************************************
// Mockito
//**********************************************************************************************************************
import static org.mockito.Mockito.*;
import org.mockito.InOrder;

//**********************************************************************************************************************
// Define an interface whose behaviour we want to stub
interface CalculatorService {
    public double add(double input1, double input2);
    public double subtract(double input1, double input2);
    public double multiply(double input1, double input2);
    public double divide(double input1, double input2);
}

//**********************************************************************************************************************
class CDRRocksTTLCacheTest {

    CalculatorService calc = mock(CalculatorService.class);     // creates mock object of a given class
    InOrder inOrder = inOrder(calc);                            // object that verifies that mock object methods were called in specific order

    @Before
    public void setUp() {
        when(calc.add(20d, 10d)).thenReturn(30d);               // add behaviour when mock object method is called
        when(calc.subtract(30d, 10d)).thenReturn(20d);
        when(calc.multiply(5d, 10d)).thenReturn(50d);
        when(calc.divide(100d, 4d)).thenReturn(25d);
        when(calc.add(1d,1d))
        .thenThrow(new IllegalArgumentException(("test")));     // add behaviour for mock object to throw exception when method is called
    }

    @Test
    public void test() {
        assertEquals(calc.add(20d, 10d), 30d, 0);
        assertEquals(calc.subtract(30d, 10d), 20d, 0);
        assertEquals(calc.multiply(5d, 10d), 50d, 0);
        assertEquals(calc.divide(100d, 4d), 25d, 0);

        reset(calc);                                            // resets mock object
    }

    @Test
    public void test2() {
        calc.add(20d, 10d);
        calc.add(20d, 10d);
        verify(calc, times(1)).add(20,10);          // asserts given mock method's been called time(n) times
        verify(calc, atLeastOnce()).add(20,10);     // asserts given mock method's been called at least once
        verify(calc, atMost(3)).add(20,10);         // asserts given mock method's been called at most atMost(n) times
        verify(calc, atLeast(2)).add(20,10);        // asserts given mock method's been called at least atLeast(n) times
    }

    @Test(expected=IllegalArgumentException.class)
    public void test3() {
        calc.add(1d, 1d);
    }

    @Test
    public void test4() {
        calc.add(2d, 2d);
        calc.subtract(2d,2d);

        inOrder.verify(calc).add(2d,2d);            // asserts method add() was called before subtract() with given arguemnts
        inOrder.verify(calc).subtract(2d,2d);
    }
}

//**********************************************************************************************************************
