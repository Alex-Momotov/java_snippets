import org.junit.Test;

import java.io.OutputStream;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;
static class Cat {
    public static void main(String[] args) {

    }
    {
//**********************************************************************************************************************
//      General Notes

// Remember to type within a static class for Jshell snippets:
//  1. In its initialisation block/regular method for regular method behaviour
//  2. Outside all mehthods for class/instance variable behaviour

// It is strongly recommended that we declare collection type as a generic type of the collection's interface, rather
// than its implementation type. E.g: Set<String> set = new HashSet<>(); is a good practice, two advantages:
//  1. We can change underlying collection implementation without changing variable types of our API.
//  2. This prevents us from using methods specific to a particular implementation, unless we cast the type.

//**********************************************************************************************************************
//      Interfaces
// Collection - The root of the collection hierarchy. All collections implement the Collection interface.
//              Used to pass collection objects around when maximum generality is required.
// Set        - A collection that cannot contain duplicate elements.
// List       - An ordered collection. Can contain duplicate elements.
//              User can access elements by integer index (position).
// Queue      â€” A collection used to hold multiple elements prior to processing.
// Deque      - Same as queue but supports FIFO and LIFO (stack). In a deque elements can be inserted retrieved and
//              removed at both ends.
// Map        - An object that maps keys to values. Cannot contain duplicate keys.
// SortedSet  - A set that maintains its element in ascending order.
// SortedMap  - A map that maintains its mappings in ascending key order.

//**********************************************************************************************************************
//      Collection interface
// All collection implementations have a constructor that takes Collection as an argument.
// This constructor initialises the new collection to contain all of the elements in the specified collection.
// It allows to convert from one collection to another.
Collection<String> set = new HashSet<>();
set.add("1");
set.add("2");
List<String> list0 = new ArrayList<>(set);   // created list from a set

// Useful methods of Collection interface that each subclass of Collection must implement
List<Integer> list = new ArrayList<>();
list.add(3);
list.size();
list.isEmpty();
list.contains(3);
list.remove(0);
list.iterator();
list.stream();
list.clear();

// Methods operating with other collection
List<Integer> list2 = new ArrayList<>();
list.containsAll(list2);
list.removeAll(list2);
list.retainAll(list2);

// Methods for converting to array
Object[] arr1 = list.toArray();                     // no arguments method .toArray() returns array of Objects
Integer[] arr2 = list.toArray(new Integer[0]);      // returns array of specified type containing elems of collection

// Methods for converting to stream
Stream<Integer> str1 = list.stream();
Stream<Integer> str2 = list.parallelStream();

// Method for converting to iterator
Iterator<Integer> iter = list.iterator();

// Removes all instances of specified element from a collection
HashSet<Integer> set1 = new HashSet<>(Arrays.asList(1, 2, 3, 4));
set1.removeAll(Collections.singleton(1));
set1.removeAll(Collections.singleton(null));
// Collections.singleton is a static factory method that returns an immutablasListe Set containing only the specified element.

//**********************************************************************************************************************
//      3 Ways to Traverse Collections
// 1. Using streams followed by aggregate operations
// 2. Using for-each construct
// 3. Using Iterators

//**********************************************************************************************************************
//      1. Aggregate operations
// We first obtain a stream from a collection, then perform aggregate operations on it.
// Aggregate operations are often used together with lambda expressions to make code more concise.
List<String> list3 = new ArrayList<>(Arrays.asList("1", "2", "3", "4"));
list3.stream()
        .filter(e -> Integer.parseInt(e) % 2 == 0)
        .forEach(e -> System.out.println(e));

//**********************************************************************************************************************
//      2. For-each construct
// Something we are already familiar with.
List<String> list4 = new ArrayList<>(Arrays.asList("1", "2", "3", "4"));
for (String s : list4) System.out.println(s);

//**********************************************************************************************************************
//      3. Iterators
// Iterator objects enable us to traverse collections remove elements from the collection selectively, if desired.
// The .remove() method of iterators is the only safe way to modify a collection during iteration.
// The behavior is unspecified if the collection is modified in any other way while the iteration is in progress.

// You get an iterator for a collection by calling its iterator method.
List<String> list5 = new ArrayList(Arrays.asList("1", "2", "3", "4"));
Iterator<String> myIter = list5.iterator();

// Iterator methods:
myIter.hasNext();       // .hasNext() returns true if the iteration has more elements.
myIter.next();          // .next() returns the next element in the iteration.
myIter.remove();        // .remove() removes the last element that was returned by next.
                        // .remove() can be called only once after each .next() and throws exception othervise.

// Use iterators when:
// 1. Need to remove current element.
// 2. Iterate over multiple collections in parallel.

// Using iterators with for loops:
String[] strings = {"1", "2", "3", "4"};
Set<String> set3 = new HashSet<>();
for (String s : strings) set3.add(s);

for (Iterator<String> it = set3.iterator(); it.hasNext(); ) {
    String curr = it.next();
    if (curr.equals("3")) it.remove();
}
System.out.println(set3);

// Using iterators with while loops
List<Integer> list6 = new ArrayList<>(Arrays.asList(1, 2, 3, 4));
Iterator<Integer> iter1 = list6.iterator();
while (iter1.hasNext()) {
    System.out.println(iter1.next());
}

//**********************************************************************************************************************
//      Iterable interface
// Iterable is a root interface which Collection extends.
// Implementing Iterable interface enables a type to be iterated using the enchanced for-each loop.
// Iterable has a method .forEach() which performs an action for each of its elements, it has nothing to do with
// the .stream().forEach()
List<Integer> L2 = new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4, 1));
L2.forEach(e -> System.out.println(e));

//**********************************************************************************************************************





}}



























