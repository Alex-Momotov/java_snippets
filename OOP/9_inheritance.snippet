//**********************************************************************************************************************
// Every class has one and only one direct superclass (single inheritance).
// In the absence of any explicit superclass, every class is implicitly a subclass of Object.
// All classes are descendant from Object class, which is at the top of the hierarchy.

// When wanting to create a class and there already exists a class that has some of needed code, we can derive the new
// class from the existing one. This make code reusable and saves having to write and debug new code.

// A subclass inherits all the members (fields, methods, and nested classes) from its superclass.
// A subclass inherits all of the public and protected members of its parent, no matter what package the subclass is in.
// If the subclass is in the same package as its parent, it also inherits the package-private members of the parent.
// Constructors are not inherited by subclasses, but the constructor of the superclass can be invoked from the subclass.

//**********************************************************************************************************************
// Use 'extends' keyword to declare a subclass.
// The inherited fields and methods can be used directly on instance of extending class.
class Animal {int field = 3; void method() {System.out.println("test");}}
class Cat extends Animal {}

new Cat().field;
new Cat().method();

//**********************************************************************************************************************
// The inherited fields and methods can be used directly within extending class.
class A {int field = 3; void method() {System.out.println("test");}}
class B extends A {{
    System.out.println(field);
    method();
}}
B b = new B();


//**********************************************************************************************************************
// Overriding vs hiding
// The version of the overridden instance method that gets invoked is the one in the subclass.
// The version of hidden static method that gets invoked depends on whether it is invoked from superclass or subclass.

//**********************************************************************************************************************
// Hiding fields
// You can declare a subclass field with the same name as in superclass (even of different type), thus hiding it.
// This is not recommended as it makes code difficult to read. Superclass field can still be accessed via 'super'.
class C {
    int field = 5;
}
class D extends C {
    long field = 10L;
    {
        System.out.println(field);
        System.out.println(super.field);
    }
}
D d = new D();
d.field;

//**********************************************************************************************************************
// Instance methods.
// You can declare a subclass method with the same signature as in superclass, thus overriding it.
// The version of the overridden instance method that gets invoked is the one in the subclass.
class E {void method() {System.out.println("super class method");}}
class F extends E {void method() {System.out.println("sub class method");}}

F test1 = new F();
E test2 = new F();
test1.method();
test2.method();

//**********************************************************************************************************************
// Static methods.
// You can declare a static subclass method with same signature as in superclass, thus hiding it (not overriding).
// The version of hidden static method that gets invoked depends on whether it is invoked from superclass or subclass.
class H {
    static void method() {
        System.out.println("static super");
    }
}
class I extends H {
    static void method() {          // No override symbol
        System.out.println("I don't override anything.");
    }
}
H.method();     // from superclass
I.method();     // from subclass

//**********************************************************************************************************************
// Illustrating difference between hiding vs overriding in instance and static methods.
// As we can see instance method got overriden but static method got hidden. Be careful.
class Super {
    void method() {System.out.println("super instance");}
    static void method2() {System.out.println("super static");}
}
class Sub extends Super {
    void method() {System.out.println("sub instance");}
    static void method2() {System.out.println("sub static");}
}
Super s = new Sub();
s.method();
Super.method2();

//**********************************************************************************************************************
// Interface methods
// When ambigyity arises between which method to inherit - instance methods are preferred over interface default methods
class Horse {public void method() {System.out.println("horse");}}
interface Flier {default void method() {System.out.println("flying");}}
interface Mythical {default void method() {System.out.println("mythical");}}
class Pegasus extends Horse implements Flier, Mythical {}

new Pegasus().method();

//**********************************************************************************************************************
// A subclass does not inherit the private members of its parent class.
// Although subclass can still use public and protected methods to access those members.
// A subclass does not inherit package-private (no modifier) members of superclass, unless they are in the same package.
class L {private int field = 10;}
class M extends L {{System.out.println(field);}}    // causes error

// A nested class has access to all the private members of its enclosing class. Therefore, a public or protected nested
// class inherited by a subclass has indirect access to all of the private members of the superclass.

//**********************************************************************************************************************
// Casting objects.
// Define some class structure to play with.
class Bird {}
class Hawk extends Bird {}
class Owl extends Bird {}
class Raven extends Bird {}

// Hawk is descendant from Bird and Object.
// Therefore Hawk is an instance of Bird and instance of Object, and can be used whenever those are called for.
Hawk h = new Hawk();
h instanceof Hawk;      // true
h instanceof Bird;      // true
h instanceof Object;    // true

// The reverse is not necessarily true. Bird can be an instance of Hawk but not necessarily.
// Similarly, Object can be Bird, or Hawk, but not necessarily.
Bird b1 = new Bird();
b1 instanceof Hawk;     // false
b1 instanceof Bird;     // true
b1 instanceof Object;   // true

// Implicit casting - using more specific type (lower on subclass hierarchy) in place of more generic type (higher on
// subclass hierarchy). Reverse is not allowed - cannnot use a more generic type where a more specific type is expected.
// This is because more specific type surely has methods of more generic type (inherits them) but a more generic type
// does not necessarily have all the methods of the more specific type, and that can lead to error.
Bird b2 = new Bird();   // okay
Bird b3 = new Hawk();   // okay - more specific type (Hawk) in place of more generic type (Bird)
Bird b4 = new Owl();    // okay - more specific type (Owl) in place of more generic type (Bird)
Bird b5 = new Raven();  // okay - more specific type (Raven) in place of more generic type (Bird)
Bird b6 = new Object(); // error - attempting to use more generic type (Object) in place of more specific type (Bird)
Hawk b8 = new Bird();   // error - attempting to use more generic type (Bird) in place of more specific type (Hawk)

// This allows one variable of a more generic type to switch between pointing to different more specific types, as necessary.
Bird b9 = new Hawk();
b9 = new Owl();
Owl owl = new Owl();
b9 = owl;
b9 = new Raven();

// However, at any moment, the compiler does not know, which of the more specific types the generic type holds.
// Here, as far as compiler is concerned, obj is an Object, and not its more specific type, Bird.
// If we try to assign obj (Object) to a more specific type (Bird), compiler complains, because obj is not known to the
// compiler to be of type Bird, supposedly leading to assigning more generic type (Object) to more specific type (Bird).
Object obj = new Bird();
Bird b10 = obj;

// Explicit casting - we can tell the compiler we promise the new type to be more specific than just Object.
// This cast does a runtime check that obj is indeed Bird, and so the compiler does not complain.
// However if obj fails to be Bird at runtime, an exception will be thrown.
Bird b11 = (Bird) obj;

// It is common to make logical test using instanceof operator, to avoid runtime error due to improper cast.
// Here instanceof operator verifies that obj is indeed of type Bird so that we can make the cast with knowledge that
// there will be no runtime exception thrown.
Bird b12;
if (obj instanceof Bird) {
    b12 = (Bird) obj;
}

//**********************************************************************************************************************
// Normally when subclass overrides an instance method in superclass, the instance method must have same signature,
// including same return type. But an overriding method can also return a subtype of the type returned in superclass.
// This subtype is called a covariant return type.
class Furniture {Bird method() {return new Bird();}}
class Table extends Furniture {Raven method() {return new Raven();}}

//**********************************************************************************************************************
// If a class implements muptiple interfaces with same default method names - the diamond problem occurs.
// The class, then, must override the default method, otherwise compiler doesn't know which method to inherit.
// When overriding default method we can simply 'choose' which implementation we want, with keyword 'super'.
interface A1 {default void method() {}}
interface A2 {default void method() {}}
class A3 implements A1, A2 {
    public void method() {
        A1.super.method();
        A2.super.method();
    }
}

//**********************************************************************************************************************
// Inherited instance methods can override abstract interface methods that a class must implement.
// Consider them as already implemented, so to speak.
interface Building {void method();}     // implementing class must implement method()
class Structure {public void method() {System.out.println("I am a structure");}}
class House extends Structure implements Building {}    // but it already inherits method() from superclass, so its ok

House house = new House();
house.method();

//**********************************************************************************************************************
// Static methods in interfaces are never inherited.
interface U1 {static void method() {System.out.println("I am U1");}}
interface U2 extends U1 {}
U1.method();
U2.method();        // Can't find method because its not inherited

//**********************************************************************************************************************
// The access specifier for an overriding method can allow more, but not less, access than the overridden method.
class Mammal {protected void method() {}}

class Bear extends Mammal {public void method() {}}    // okay - 'public' is less restrictive than 'protected'
class Rabit extends Mammal {protected void method() {}}// okay - same access specifier as in superclass
class Fox extends Mammal {void method() {}}            // error - 'package-private' is more restrictive than 'protected'
class Dear extends Mammal {private void method() {}}   // error - 'private' is more restrictive than 'protected'

//**********************************************************************************************************************
// Attempting to change instance method in the superclass to static method in subclass, and vice versa results in error.
class Fish {void instMethod() {} static void statMethod() {}}
class Salmon extends Fish {static void instMethod() {}}     // error - overriding method is static
class Haddock extends Fish {void statMethod() {}}           // error - overriding mehod is an instance method

//**********************************************************************************************************************
// Subclass can overload methods of its superclass. Those new methods don't override nor hide the superclass methods
// since they have different signatures. They are entirely separate methods.
class Insect {void method() {System.out.println("insect method");}}
class Mosquito extends Insect {void method(int a) {System.out.println("mosquito method");}}

new Mosquito().method();
new Mosquito().method(5);

//**********************************************************************************************************************
// Virtual method invokation
// JVM calls the appropriate method for the object that is referred to in each variable. It does not call the method
// that is defined by the variable's type. This behaviour is called virtual method invokation.
class Bicycle {void method() {System.out.println("bicycle");}}
class MountainBike extends Bicycle {void method() {System.out.println("mountain bike");}}
class RoadBike extends Bicycle {void method() {System.out.println("road bike");}}

Bicycle bike01, bike02, bike03;
bike01 = new Bicycle();
bike02 = new MountainBike();
bike03 = new RoadBike();

bike01.method();
bike02.method();
bike03.method();

//**********************************************************************************************************************
// 'super' keyword
//**********************************************************************************************************************
// If method overrides its superclass's method, you can invoke the overridden method through use of the keyword super.
// This allows overriding methods to utilise functionality of overriden methods, then add extra features afterwards.
class Tree {
    void method() {System.out.println("I am a tree");}
}
class Oak extends Tree {
    void method() {
        super.method();
        System.out.println("More specifically, I am an oak tree.");
    }
}

Oak oak = new Oak();
oak.method();

//**********************************************************************************************************************
// This works just fine if the overriden superclass method uses parameters.
class Shape {
    void method(int a) {System.out.println("I am a shape, my number is " + a);}
}
class Triangle extends Shape {
    void method(int a) {
        super.method(a);
        System.out.println("I have " + a + " edges");
    }
}

new Triangle().method(3);

//**********************************************************************************************************************
// Using 'super' a subclass can invoke superclass constructor, then add additional initialisation code of its own.
// Invocation of a superclass constructor must be the first line in the subclass constructor.

// The syntax for calling superclass constructor is: super() or super(parameter list).
// With super(), the superclass no-argument constructor is called.
// With super(parameter list), the superclass constructor with a matching parameter list is called.

class Employee {
    int salary;
    String name;
    public Employee(int salary, String name) {
        this.salary = salary;
        this.name = name;
    }
}
class Developer extends Employee {
    String progLang;
    public Developer(int salary, String name, String progLang) {
        super(salary, name);            // must be first line in constructor
        this.progLang = progLang;
    }
}

Developer d1 = new Developer(35000, "John", "Python");
d1.salary;
d1.name;
d1.progLang;

//**********************************************************************************************************************
// If a constructor does not explicitly call a superclass constructor, the no-argument constructor of the superclass is
// automatically called. If the super class does not have a no-argument constructor, you will get a compile-time error.
// Object does have such a constructor, so if Object is the only superclass, there is no problem.
class University {
    public University(int a) {}
}
class SwanseaUni extends University {
    public SwanseaUni() {}              // error because superclass has no no-argument constructor
}

//**********************************************************************************************************************
// If a subclass constructor invokes a constructor of its superclass, either explicitly or implicitly, there will be
// a whole chain of constructors called, all the way up to the Object class. This is called constructor chaining.
class One {public One() {System.out.println("one");}}
class Two extends One {public Two() {System.out.println("two");}}
class Three extends Two {public Three() {System.out.println("three");}}

Three three = new Three();

//**********************************************************************************************************************


