//**********************************************************************************************************************
// Varargs "..."
// Parameter with variable number of arguments (varargs) must be the last parameter. Inside the method, the parameter
// is treated as array. Client can either pass array or sequence of parameters (which becomes array), or nothing.
void method(int... a) {
    for (int i = 0; i < a.length; i++) System.out.println(a[i]);
}
method(1, 2)                        // passing sequence of arguments
method(1, 2, 3, 4)

method(new int[] {9, 8, 7, 6})      // passing an array
int[] arr = {5, 5, 5, 5, 5};
method(arr);


//**********************************************************************************************************************
// Arbitrary number of object parameters is useful
void method2(Object... a) {
    for (Object o : a) System.out.println(o + " is \t" +o.getClass().getName().split("\\.")[2]);
}
method2(5, 5f, 5L, 5D, "5")


//**********************************************************************************************************************
// We can pass nothing
void method(long... b) {
    for (long L : b) System.out.println(L);
}
method();
method(1L, 2L, 3L);


//**********************************************************************************************************************
// There can be several arguments before the varargs argument
void method3(int a, String s, byte... b) {
    System.out.println("the int is: " + a);
    System.out.println("the String is: " + s);
    System.out.print("byte array is: ");
    for (Byte bite : b) System.out.print(bite + " ");
    System.out.println();
}
int x = 5;
method3(x, "Test1", (byte) 1, (byte) 2);
method3(x, "Test1", (byte) 1, (byte) 2, (byte) 3, (byte) 4);




