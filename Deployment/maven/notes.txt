Maven is a plugin driven build tool.
Dependency management out of the box.
Large repository of libraries.
Maven is extensible, plugins can be written in Java.


//----------------------------------------------------------------------------------------------------------------------
    Commands
mvn --version               Maven version
mvn help:effective-pom      Print effective pom
mvn <PLUGIN>:help           Print all goals in a plugin
mvn <PLUGIN>:<GOAL>         Runs specific goal without executing entire phase and preceding phases

//----------------------------------------------------------------------------------------------------------------------
    Convention Over Configuration
Maven is about convention over configuration.

Source code	            /src/main/java
Resources	            /src/main/resources
Tests	                /src/test
Complied byte code	    /target
distributable JAR	    /target/classes
//----------------------------------------------------------------------------------------------------------------------
    POM - Project Object Model
- Build file is pom.xml which is in project root dir.
- POM - project object model.
- pom.xml contains goals (like targets in make or targets in ant) and plugins.
- When you run a goal from terminal, maven looks for pom.xml in current dir and looks for a goal with that name.

//----------------------------------------------------------------------------------------------------------------------
    GroupId, ArtifactId, Version
- GroupId, ArtifactId and version uniquely identify a project in a repository.
  GroupId consists of company name and project group.
  ArtifactId is the name of the project.
- In pom.xml this is defined by the following tags, which are all mandatory.

    <groupId>com.companyname.project-group</groupId>
    <artifactId>project</artifactId>
    <version>1.0</version>

- Projects notation in a repository is groupId:artifactId:version.

//----------------------------------------------------------------------------------------------------------------------
    Super POM
Super pom - default pom which all projects inherit plugins and goals from.
Effective pom - project configuration plus configuration from super pom.

Run "mvn help:effective-pom" to print effective pom.
Super pom includes source dir, test dir, output dir, plugins, repositories, etc.


//----------------------------------------------------------------------------------------------------------------------
    Life Cycles
- Life cycles: there are three build-in life cycles:
    clean       Removes files generated by previous build
    default     Main life cycle that builds the project
    site        Creates projects documentation
- Each life cycle consists of several phases.

//----------------------------------------------------------------------------------------------------------------------
    Phases
- Each phase is a stage in a lifecycle which is responsible for a specific task.
- Some important default lifecycle phases:
    validate:           check if all information necessary for the build is available
    compile:            compile the source code
    test-compile:       compile the test source code
    test:               run unit tests
    package:            package compiled source code into the distributable format (jar, war, â€¦)
    integration-test:   process and deploy the package if needed to run integration tests
    install:            install the package to a local repository
    deploy:             copy the package to the remote repository
- Executing a phase with "mvn <PHASE>" runs all phases in the given lifecycle up-to and including the specified phase.
- Each phase is made up of one or more goals.

//----------------------------------------------------------------------------------------------------------------------
    Goals
- Each goal is responsible for a specific task.
- Nornally goals are part of phases.
- Plugins can also have goals.
- mvn <PLUGIN>:<GOAL> executes a goal without running entire phase or previous phases

//----------------------------------------------------------------------------------------------------------------------
    Repositories
Place where project jars, library jars, plugins are stored.
Three types of repositories: local, remote, central

    Local Repository
Local Maven repository is located in a folder on your machine. On Mac it is ~/.m2
When you run a maven build, maven downloads project dependencies into local repository.

    Central Repository
Maven central repository is provided by Maven community. It contains a large number of community libraries.
When maven does not find a dependency in local reposotory, it starts searching central repository at: https://repo1.maven.org/maven2/
You can search atrifacts in central repository here: https://search.maven.org/#browse

    Remote Repository
Company's custom repository containing libraries and projects developed at the company.

    Search Order
Local Repo -> Central Repo -> (if specified) Remote Repo
If a dependency is not found in none of those, Maven throws an error.

//----------------------------------------------------------------------------------------------------------------------
    Plugins
Maven is just core framework for a collection of plugins which execute actual tasks.
Plugins is where the real action is performed - compiling code, creating jars, testing.
Almost any action you can think of, performed on the project is implemented as Maven plugin.
Plugins are a central feature of Maven which allow for reuse of common build logic across projects.
Plugins define parameters which can be used to customise plugin behaviour - e.g. for clean plugin it's the path to dir to be cleaned.

