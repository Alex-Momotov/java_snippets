//----------------------------------------------------------------------------------------------------------------------
    Basics
Typically .jar file contains .class files and auxiliary resources.

//----------------------------------------------------------------------------------------------------------------------
    Commands
jar cf jar_name files                       Create jar from space separated list of files or directories. Path to each
                                            file is packaged together with the file, use -C option to avoid this
                                            behaviour. Default manifest will be included.
                                                v - verbose
                                                e - application entry point as fully qualified class name of main method
                                                m - manifest info from text file
                                                -C layer/layer dir - exclude layers of dirs from being packaged
                                            Examples:
                                                jar cfm jar_name manifest.txt files
                                                jar cfe jar_name entry.point files
                                                jar cfe jar_name entry.point files -C some_dir files

jar tf  jar_name                            List contents of jar
jar xf  jar_name                            Extract contents of jar
jar uf  jar_name files                      Add space separated list of files to existing jar file.

java -jar jar_name                          Run java program from jar file. Manifest must contain 'Main-Class' header
                                            specifying fully qualified name of the main method.

javac files                                 Compile space separated list of .java files.
javac some_dir/*.java                       Will compile all .java files in a given dir.

//----------------------------------------------------------------------------------------------------------------------
    Manifest file
Path to manifest file within jar is always META-INF/MANIFEST.MF
Manifest's entries take the form of "header: value" pairs.

    "Main-Class"
1. Create .txt file with following: "Main-Class: animals.birds.Falcon"
2. jar -cfm manifest.txt app.jar files

    "Class-Path"
1. Create .txt file with following: "Class-Path: MyUtils.jar". This specifies external jar files that are not within
   the jar file being created. Those external jars will be expected to be present when running the original jar file.
2. jar -cfm manifest.txt app.jar files

//----------------------------------------------------------------------------------------------------------------------
    Different ways to run
From .jar
1. Package your app in jar then run from jar if no dependencies
2. Package your app in jar and specify path to dependency jars using Class-Path header in manifest.
3. Pachage your app in jar and place dependency jars into ~/Library/Java/Extensions/
4. Pachage your app in jar together with .class files extracted from dependency jars, then run your jar normally

From .class
1. Run app normally if no dependencies
2. Specify path to jar dependencies or .class dependencies using -cp
3. Specify path to jar dependencies or .class dependencies using CLASSPATH env var
4. Place jar dependencies into ~/Library/Java/Extensions/ and run normally

You can not combine -cp and -jar in the same command. So when running a jar and .class files of dependency jars are not
packaged in that jar, the dependency jars must be specified using the Class-Path header.

Another option is to manually add .class files of all dependency jars to your app's jar when creating it. For example,
a tool called UberJar does exactly that for you.

//----------------------------------------------------------------------------------------------------------------------