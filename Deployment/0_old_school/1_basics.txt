//----------------------------------------------------------------------------------------------------------------------
    Fundamentals
JRE - Java Runtime Environment. JVM, Java Class Library, the java command.
JDK - Superset of JRE. Contains everything JRE does, plus Java SDK and compiler.

JAVA_HOME - Many programs use the JAVA_HOME environment variable to determine the Java installation location.

//----------------------------------------------------------------------------------------------------------------------
    Java on Mac
/Library/Java/JavaVirtualMachines/                                  - Where mac typically stores JDKs and JREs.
/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home    - Example value of $JAVA_HOME on mac.

//----------------------------------------------------------------------------------------------------------------------
    Extension Mechanism
$JAVA_HOME/jre/lib/ext/         - add JAR files here for system wide extensions (not recommended).
/Library/Java/Extensions/       - add JAR files here for system wide extensions (prefered way).
~/Library/Java/Extensions/      - add JAR files here for user speicfic extensions (prefered way).

//----------------------------------------------------------------------------------------------------------------------
    java_home - Apple tool
/usr/libexec/java_home          - A built-in macOs tool for locating java home. Simply executing it prints current location
                                  of java home. On mac $JAVA_HOME points to this tool, which then gets executed and points
                                  to current java home.
/usr/libexec/java_home -V       - Lists all installed JDKs on mac

/usr/libexec/java_home -v 1.6   - Prints location of specific version of JDK installation

    Proper way to set JAVA_HOME on mac:
export JAVA_HOME=`/usr/libexec/java_home`           - Line in .bash_profile to set JAVA_HOME equal to default JDK (newest)
export JAVA_HOME=`/usr/libexec/java_home -v 1.8`    - Line in .bash_profile to set JAVA_HOME equal to specific version of JDK

//----------------------------------------------------------------------------------------------------------------------
    Java on Liux
Lists java installations:
sudo update-alternatives --config java

Switch java version:
sudo update-alternatives --config java

Set JAVA_HOME for all users by doing:
sudo nano /etc/environment
JAVA_HOME="path to jre"

//----------------------------------------------------------------------------------------------------------------------
    CLASSPATH
CLASSPATH means "class search path", is where JVM looks for .class files, JAR files, and named packages.
Both 'javac' and 'java' commands need class path. The default value of class path is "." - current dir.

Options:
1. Set CLASSPATH env var - remember to include current dir, since it won't be included by default anymore.
        CLASSPATH=.:/some/dir/
        export CLASSPATH
2. Set class path using -cp option "java -cp .:/some/dir/:/another/dir Cat". Remember to include current dir '.'.
   This is prefered over env var change. This also overrides value of CLASSPATH env var.
3. Put files in location which is always on classpath:
        $JAVA_HOME/jre/lib/ext/
        /Library/Java/Extensions/

Correctly specifying cp to include:
- Unnamed package - cp ends with dir containing .class files.
- Named package - cp ends with dir containing root package (first package in the full package name).
- JAR - cp ends with name of .jar file. Or cp ends with .../* to include all .jar files in that dir.

//----------------------------------------------------------------------------------------------------------------------
    Package basics
 1. To create a package, put package statement with the package name as a first line of every source file you wish to
    be included in the package.
 2. Both .java files and the compiled .class files should be in a series of directories that reflect the package name.
 3. The package statement must be the first line in the source file.
 4. There can be only one package statement in each source file and it applies to all types in the file.
 5. If you put multiple types in a single source file, only one can be public, and it must have the same name as the
    source file.
 6. A new package creates a new namespace, meaning two packages can have classes with same names without a conflict.
 7. JVM constructs path to your .class files by adding package name to the class path. So if <path>/classes/ is your
    CLASSPATH, and your package is com.example.project, then JVM looks for .class files in <path>/classes/com/example/project/.
 8. You can let types within a package have unrestricted access to each other, then restrict access for outside types.
 9. If you do not use a package statement, your type ends up in an unnamed package. Generally speaking, classes and
    interfaces should be in named packages.
 10. A fully qualified name of a class includes the package name. For Example java.util.HashMap, not just HashMap.

//----------------------------------------------------------------------------------------------------------------------
    Invoking Class From Package
If root directory of named package is added to classpath, we can run a class from that package by using a fully qualified
name of the class.

Directory structure: animals/birds/Falcon.java
First line in Falcon.java: package animals.birds;

Invocation: java animals/birds/Falcon
        OR: java animals.birds.Falcon

//----------------------------------------------------------------------------------------------------------------------
    Compiling - javac
1. Can compile all .java files in a dir using .../*.java syntax
2. Can do "javac dir_1/*.java dir_2/*.java"
3. Can combine find command with javac:
    find . -name *.java > sources.txt
    javac @sources.txt
4. Can use javac -d out/ src/*.java to save compiled .class files in a different dir

//----------------------------------------------------------------------------------------------------------------------

