//----------------------------------------------------------------------------------------------------------------------
    Basics
When creating new project, no need to create empty dir beforehand.
You can safely delete out/ directory, it will be recreated on build or rebuild.
Artifact is a jar built from your project, or used by your project as a jar dependency.
IntelliJ IDEA can load libraries from Maven even if you don't use Maven as a build tool for your project.

//----------------------------------------------------------------------------------------------------------------------
    Creating Project
Use 'Create new project' to create a new project from scratch.
Use 'Import project' or 'Project From Existing Sources...' to create a project from pre-existing codebase.

//----------------------------------------------------------------------------------------------------------------------
    Run
Clicking green arrow 'Run' does three things:
    1. Creates temporary run configuration.
    2. Compiles code with 'javac' and places it into 'out/' directory.
    3. Runs the bytecode.

//----------------------------------------------------------------------------------------------------------------------
    'Out/' Directory
Sources:    <ProjectFolder>/out/production/<ModuleName>/<PackageName>/
Tests:      <ProjectFolder>/out/test/<ModuleName>/<PackageName>/
Artifacts:  <ProjectFolder>/out/artifacts/<ArtifactName>/

//----------------------------------------------------------------------------------------------------------------------
    Build

    Build Process Steps
1. Compiling source code in the source path of a module and placing results to the output path.
2. Compiling source code in the test path of a module and placing results to the test output path.
3. Creating copies of the resource files in the output path.
4. Reporting problems in the Messages tool window.

    Compile settings
Preferences -> Compiler -> "Clear output directory on rebuild" is enabled, all dirs under out/monule_name/... will be
deleted when doing 'Rebuild' but not when doing 'Build'.

    Compile <target>
All the source files in the specified scope are compiled.
Select class(es) in project menu -> Build -> Recompile <target>

    Build Project
Source files in the entire project modified since the last compilation, are compiled.
Dependent source files, if appropriate, are also compiled.
Tasks tied to the compilation or build process on the modified sources are performed.
Build -> Build Project      OR      Command + B

    Build Module
Compiles recursively all source files modified since the last compilation in module, and in all modules it depends on.
Build -> Build Module <target>

    Rebuild Project
All the source files in the project are recompiled.
Build -> Rebuild Project

//----------------------------------------------------------------------------------------------------------------------
    Build (more)

    Compilation output locations
There are individual compilation output folders for your sources and test sources, and for each of your modules.
By default, the results of compilation are output to:
    Sources:    <ProjectFolder>/out/production/<ModuleName>/<PackageName>/
    Tests:      <ProjectFolder>/out/test/<ModuleName>/<PackageName>/

    Change project compile location
Project Structure -> Project -> Project Compiler Output
This changes location of compile dir 'out/' for the project as well as all it's modules.

    Change module compile location
Project Structure -> Modules -> Paths -> Use module compile output path

//----------------------------------------------------------------------------------------------------------------------
    Artifact Naming
Artifact is a packaged code which are usually JAR file.
Example of artifact name 'com.nexmo:client:5.1.0'.

Artifact name structure - Group_ID:Artifact_ID:Version
Combination of group id, artifact id, and version uniquly identify an artifact.

    Group_ID        Usually a reversed domain name      e.g. 'com.nexmo'
    Artifact_ID     Just a name                         e.g. 'client'
    Version         Version strung                      e.g. '5.1.0'

//----------------------------------------------------------------------------------------------------------------------
    Artifacts

    Create JAR Config
Project Structure -> Artifacts -> '+' -> 'JAR' -> 'From modules with dependencies...'
Select main class under 'Main Class' (if your app has one) -> 'OK'
    - 'extract to the target JAR' does ...
    - 'copy to the output directory and link via manifest' does ...
Config menu opens -> further customise jar structure if necessary.

    Build JAR
Build -> Build Artifacts -> select jar config -> jar can now be found under out/artifacts/
OR simply 'build project' if include in project build' was selected.

    Run From JAR
'Edit Configurations...' -> '+' -> 'JAR Application' -> specify 'Path to JAR'.
Optionally, under 'Before launch' -> '+' -> 'Build Artifacts' -> select the jar (Will build the jar before running).
Select and run the new configuration.

//----------------------------------------------------------------------------------------------------------------------
    Modules
.iml file is a module file, it is created for each module in the project.
A module consists of a module root dir (aka content root) and a module file (.iml).
A module contains subdirectories for source code, unit tests, resource files, and so on.
Grouping modules together makes it easier to navigate a large project.

    Creating Module:
To create a new module, right click on top-level module -> 'New...' -> 'Module' -> Select module type
    Grouping/Ungrouping Modules:
Project Structure -> Modules -> Select multiple modules and right click -> 'Change Module Names...' -> type common prefix
Project Structure -> Modules -> Select multiple modules and right click -> 'Change Module Names...' -> remove any prefix

You can configure directory categories for each module from: Project Structure -> Modules -> Sources.
You can also do that by: Right click dir on project menu -> 'Mark directory as...'
To exclude files by a name pattern, e.g. '*.class', from a dir: Project Structure -> Modules -> Sources -> Exclude files.
Use Project Structure -> Modules -> Sources -> <pen symbol next to resource dir> To set path where resource dir is copied.

    Directory Types:
Sources         Those will be compiled.
Tests           Source code for tests.
Resources       Copied to out/ as is.
Excluded        Ignored for code completion, navigation and inspection. Compiled out/ directory is normally excluded.

//----------------------------------------------------------------------------------------------------------------------
    Module Dependencies
Module dependencies can be SDKs, JAR files (libraries) and other modules.
List of dependencies for a module are used to create class path for running or compiling that module.

    Add dependency
Project Structure -> Modules -> Dependencies tab -> '+' -> select of of below:
    - 'JARs or directories'     JAR file or dir with bytecode on your computer.
    - 'Library'                 Existing library or create new library.
    - 'Module Dependency'       Another module in the project.

    Remove dependency
Project Structure -> Modules -> Dependencies tab -> Right click a dependency -> Find usages ->
-> (ensure no other module uses that dependency) -> Right click again -> Remove

    Dependency scope
Compile:    required to build, test, and run a project (the default scope).
Test:       required to compile and run unit tests.
Runtime:    part of the classpath to test and run a project.
Provided:   used for building and testing a project.

    Analysing dependency
To check whether a dependency still exists, you can run a dependency analysis:
Project Structure -> Modules -> Dependencies tab -> Right click a dependency -> 'Analyse This Dependency'

    Sorting dependencies
Dependency order determines order of classes that are put on the classpath. To change dependency order:
Project Structure -> Modules -> Dependencies tab -> Select a dependency -> (use arrow icons to move up or down)

//----------------------------------------------------------------------------------------------------------------------
    Facets
Facets are framework specific addons such as Spring, Kotlin, Groovy, which can be registered with a module.

    Add Facet To A Module
Project Structure -> Modules -> right click a module -> Add -> (select a framework)
OR Project Structure -> Facets -> '+' -> (select a module)

//----------------------------------------------------------------------------------------------------------------------
    SDKs
Supported SDKs are JDK, Android SDK, Google App Engine SDK, Flex SDK, Air SDK, IntelliJ Platform Plugin SDK.
To define a global SDK means to tell IntelliJ where installation is. Once defined, the SDK can be used by many modules.

    Register Global SDK
Project Structure -> SDKs -> '+'.

    Change Project SDK
Project Structure -> Project -> Project SDK

    Change Module SDK
Project Structure -> Modules -> Dependencies -> Module SDK

//----------------------------------------------------------------------------------------------------------------------
    Libraries
A library can be: .class files, directory with .class files, or JAR file.
Libraries can be defined at three levels:
    1. global       available for many projects
    2. project      available for all modules within a project
    3. module       available for one module

    Add Global Library
Project Structure -> Global Libraries -> '+'
    Add Project Library
Project Structure -> Libraries -> '+'
    Add Module Library
Project Structure -> Modules -> Dependencies -> '+' -> 'Library...'

Global and project libraries are not available to modules until you add them as module dependencies.
Project Structure -> Modules -> Dependencies -> '+' -> 'Library...' -> (select project or global library)

    Ways To Add Library
When adding a library, you have a choice:
 - 'Java' means you select JAR or class files from your computer
 - 'From Maven...' means you download a library from Maven repository

    Download From Maven
In the window that opens, you can specify exact artifact name e.g. 'com.nexmo:client:5.1.0' OR enter a keyword and search.
If you tick the 'Download to...' option, the library jars will be downloaded where you specify.
Otherwise the libraries will be saved in your local maven repository which is at '~/.m2/repository/'.
If you tick 'Transitive dependencies', all dependencies of the library will be downloaded too. (Usually what you want).

    Customise Inclusion Of Transitive Dependencies
Project Structure -> Libraries -> Edit -> Configure -> (select the dependencies you want to include in the library)

    Add Remote Repository
Preferences -> Remote Jar Repositories -> Add
This enables you to download libraries from that repository.

    Move Library To Different Level
Right click a library -> 'Move to Project libraries'
Right click a library -> 'Move to Global libraries'
Right click a library -> 'Copy to Module libraries' (will be copied to .../module_name/lib/)

//----------------------------------------------------------------------------------------------------------------------
    Running Configuration
VM options - optional JVM arguments, for example the heap size, garbage collection options, file encoding, etc.
Program arguments - optional list of parameters that should be passed to the main() method.

//----------------------------------------------------------------------------------------------------------------------
    Log files
Run/Debug Configurations -> Logs tab -> '+' -> (specify location of log file)
'Is Active' checkbox - toggles whether those logs are used for next configuration run.
'Skip Content' checkbox - will skip previous content of a selected log file.

//----------------------------------------------------------------------------------------------------------------------
    Debugging
Breakpoint settings - (Shift + Command + F8)
Suspend code execution when field is accessed for read or write - (click getter next to field)
Evaluate expression without suspending code - (Shift + click gutter) - as a substitute to printing out things
Temporary breakpoint (dissapears once hit) - (Option + click gutter)
Disable breakpoint without removing it - (Option + click gutter)

//----------------------------------------------------------------------------------------------------------------------
    Testing
JUnit is included with intelliJ by default at:
 - <IntelliJ IDEA directory>/lib/hamcrest-core-1.3.jar
 - <IntelliJ IDEA directory>/lib/junit-4.12.jar

    Test Configurations
You can create test configurations:
 - method                                   Right click test method -> "Create <method_name>()"
 - 1 or more test                           Select multiple classes -> right click -> "Create <first_test_name> and <n> more"
 - all tests in a directory or a package    Right click package -> "All tests in ..."

    Create test from a class
To create a test from a class - Command + G -> select 'Test...' -> select methods to be tested.
OR, (place cursor on class name -> bring up intentions menu (Command + 1)) -> 'Create Test'

To enable auto testing after project build - click 'Toggle Auto Test' on the test run toolbar.
You can rerun only failed tests by clicking 'Rerun failed tests' on the test run toolbar.
To navigate from test line in test run window to test source code, select the test and click Shift + Enter.
To see test history of a particular test, click 'Test History' on test run toolbar.

    Test Driven Development
To automatically generate test method/set up/tear down - press Command + G (Generate) within test class
Write your tests describing what you want to achieve on classes which don't exist yet(TDD), then press Command + 1 on
any and select "Create class/method". This will create a minimum implementation to keep the compiler happy.
//----------------------------------------------------------------------------------------------------------------------
    Tools

    Idea Diff
You can use IntelliJ's diff view on two arbitrary files outside your project, using commnad line tool. First, IntelliJ will open.
"idea diff file_1 file_2"

//----------------------------------------------------------------------------------------------------------------------







